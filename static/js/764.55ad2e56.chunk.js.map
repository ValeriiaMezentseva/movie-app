{"version":3,"file":"static/js/764.55ad2e56.chunk.js","mappings":"yTAGaA,EAAQC,EAAAA,EAAAA,GAAH,sFAET,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,eAAvB,IAIDC,EAAYL,EAAAA,EAAAA,KAAH,+EAsBTM,GAhBUN,EAAAA,EAAAA,IAAH,4PAgBOA,EAAAA,EAAAA,IAAH,4HAOXO,EAAaP,EAAAA,EAAAA,KAAH,yJACEQ,GAQZC,EAAeT,EAAAA,EAAAA,EAAH,6HACd,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,eAAvB,I,mBCwChB,EA3EkB,WAChB,OAA8BM,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4CJ,EAAAA,EAAAA,UAAS,MAArD,eAAOK,EAAP,KAAuBC,EAAvB,KACA,GAAgDN,EAAAA,EAAAA,UAAS,MAAzD,eAAOO,EAAP,KAAyBC,EAAzB,KACMC,GAAkBC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOC,eAAxB,KAElCC,EAAAA,EAAAA,YAAU,WACNZ,GAAW,GACPO,GACAP,GAAW,EAElB,GAAE,CAACO,IAGN,IAAMM,EAAY,SAACC,EAAQC,GACzBX,EAAkBU,GAClBZ,GAAa,GACbI,EAAoBS,EACrB,EAEKC,EAAa,WACjBZ,EAAkB,MAClBF,GAAa,GACbI,EAAoB,KACrB,EAED,OACE,UAACb,EAAD,WACKM,IAAW,SAACkB,EAAA,EAAD,KACV,SAAC9B,EAAD,wBAC4B,IAA3BoB,EAAgBW,QACb,UAACxB,EAAD,YACI,SAACC,EAAD,KACA,SAACE,EAAD,+DAGJ,SAAC,KAAD,UACKU,EAAgBY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,eAAgBC,EAAjD,EAAiDA,aAAcC,EAA/D,EAA+DA,aAA/D,OACjB,SAAC,KAAD,WACI,SAACC,EAAA,EAAD,CACIP,GAAIA,EACJC,MAAOC,GAAQD,EACfO,OAAQL,EACRM,YAAaL,GAAkBC,EAC/BK,YAAaJ,EACbK,QAAS,WACDN,EACAZ,EAAUO,EAAI,SACPI,GACPX,EAAUO,EAAI,SAErB,KAbUA,EADF,MAoBhCnB,GAAaE,IACZ,UAAC6B,EAAA,EAAD,CAAOvB,MAAOR,EAAWgC,QAASjB,EAAlC,UACwB,UAArBX,IACC,SAAC6B,EAAA,EAAD,CAAgBC,QAAShC,EAAgBa,WAAYA,IAEjC,WAArBX,IACC,SAAC+B,EAAA,EAAD,CAAiBC,SAAUlC,EAAgBa,WAAYA,QAIxD,SAAC,EAAAsB,SAAD,CAAUC,UAAU,SAACtB,EAAA,EAAD,IAApB,UACK,SAAC,KAAD,QAIf,C","sources":["pages/WatchList/WatchList.styled.jsx","pages/WatchList/WatchList.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport watchlist from '../../images/watchlist.png'\n\nexport const Title = styled.h2`\ntext-align: center;\ncolor: ${props => props.theme.colors.primaryDarkText};\ntext-transform: uppercase;\n`; \n\nexport const Container = styled.main`\nmax-width: 1200px;\nmargin: 0 auto;\npadding: 0 16px;\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100px;\n  height: 100px;\n  background-color: rgba(0, 0, 0, 0.6);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const NoMoviesBox = styled.div`\n    display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`; \n\nexport const NoMovieImg = styled.span`\n background-image: url(${watchlist});\n  background-size: contain;\n  opacity: 0.30;\n border: none; \n  width: 120px;\n  height: 120px; \n`\n\nexport const NoMoviesText = styled.p`\n  color: ${props => props.theme.colors.primaryDarkText};\n  font-size: 18px;\n  font-weight: 500;\n  margin-top: 20px;\n  text-align: center; \n`; \n\n","import { useState, Suspense, useEffect } from 'react';\nimport { useSelector} from 'react-redux';\nimport { Outlet } from 'react-router-dom';\n\nimport { MovieCard } from 'components/MovieCard/MovieCard';\nimport Modal from 'components/Modal/Modal';\nimport MovieInfoModal from 'components/MovieInfoModal/MovieInfoModal';\nimport SeriesInfoModal from 'components/SeriesInfoModal/SeriesInfoModal';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { Container, Title, NoMoviesBox, NoMovieImg, NoMoviesText } from './WatchList.styled';\nimport { List, MovieCardBox } from 'components/MovieList/MovieList.styled';\n\nconst WatchList = () => {\n  const [loading, setLoading] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedItemId, setSelectedItemId] = useState(null);\n  const [selectedItemType, setSelectedItemType] = useState(null); \n  const watchListMovies = useSelector((state) => state.movies.watchlistMovies);\n    \n    useEffect(() => {\n        setLoading(true);\n        if (watchListMovies) {\n            setLoading(false); \n        }\n    }, [watchListMovies]); \n\n\n  const openModal = (itemId, itemType) => {\n    setSelectedItemId(itemId);\n    setModalOpen(true);\n    setSelectedItemType(itemType);\n  };\n\n  const closeModal = () => {\n    setSelectedItemId(null);\n    setModalOpen(false);\n    setSelectedItemType(null);\n  };\n\n  return (\n    <Container>\n        {loading && <Loader />}\n          <Title>Watchlist</Title>\n          {watchListMovies.length === 0 ? (\n              <NoMoviesBox>\n                  <NoMovieImg />\n                  <NoMoviesText>You didn't add any movies to your watchlist!</NoMoviesText>\n              </NoMoviesBox>\n          ) : (\n              <List>\n                  {watchListMovies.map(({ id, title, name, poster_path, first_air_date, release_date, vote_average }) => (\n                      <MovieCardBox key={id}>\n                          <MovieCard\n                              id={id}\n                              title={name || title}\n                              poster={poster_path}\n                              releaseDate={first_air_date || release_date}\n                              voteAverage={vote_average}\n                              onClick={() => {\n                                  if (release_date) {\n                                      openModal(id, 'movie');\n                                  } else if (first_air_date) {\n                                      openModal(id, 'series');\n                                  }\n                              }}\n                          />\n                      </MovieCardBox>\n                  ))}\n              </List>\n          )}\n      {modalOpen && selectedItemId && (\n        <Modal state={modalOpen} stateFn={closeModal}>\n          {selectedItemType === 'movie' && (\n            <MovieInfoModal movieId={selectedItemId} closeModal={closeModal} />\n          )}\n          {selectedItemType === 'series' && (\n            <SeriesInfoModal seriesId={selectedItemId} closeModal={closeModal} />\n          )}\n        </Modal>\n          )}\n           <Suspense fallback={<Loader />}>\n                <Outlet />\n            </Suspense>\n    </Container>\n  );\n}; \n\nexport default WatchList;"],"names":["Title","styled","props","theme","colors","primaryDarkText","Container","NoMoviesBox","NoMovieImg","watchlist","NoMoviesText","useState","loading","setLoading","modalOpen","setModalOpen","selectedItemId","setSelectedItemId","selectedItemType","setSelectedItemType","watchListMovies","useSelector","state","movies","watchlistMovies","useEffect","openModal","itemId","itemType","closeModal","Loader","length","map","id","title","name","poster_path","first_air_date","release_date","vote_average","MovieCard","poster","releaseDate","voteAverage","onClick","Modal","stateFn","MovieInfoModal","movieId","SeriesInfoModal","seriesId","Suspense","fallback"],"sourceRoot":""}