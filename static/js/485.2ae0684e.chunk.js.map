{"version":3,"file":"static/js/485.2ae0684e.chunk.js","mappings":"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","sources":["pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { NavLink } from \"react-router-dom\";\n\n\nexport const Link = styled(NavLink)`\n  align-items: center;\n  text-decoration: none;\n  color: ${props => props.theme.colors.primaryDarkText};\n  font-weight: 500;\n\n  &.active {\n    color: ${props => props.theme.colors.primaryLightText};\n    background-color: ${props => props.theme.colors.redColor};\n  }\n`;\n\n\nexport const Title = styled.h2`\n  text-align: center;\n  margin-bottom: 0;\n  color: ${props => props.theme.colors.primaryDarkText};\n`;\n\nexport const Container = styled.main`\n  margin: 10px;\n  padding: 0 16px;\n`;\n\nexport const TrendingBox = styled.div`\n  margin-bottom: 30px;\n  border-radius: 10px;\n  overflow: hidden;\n`;\n\nexport const TrendingList = styled.div`\ndisplay: flex; \nalign-items: center;\nborder-radius: 10px;\nmargin-top: 8px; \nbox-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n\n`;\n\nexport const ListBox = styled.div`\n  display: flex;  \n  flex-direction: column; \n\n`; \n\nexport const MovieList = styled.ul`\n  display: flex;\n  overflow-x: auto;\n  scroll-behavior: smooth;\n  padding: 20px;\n  margin: 0;\n  list-style-type: none;\n \n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  & > * {\n    flex-shrink: 0;\n    margin-right: 14px;\n  }\n`;\n\nexport const ScrollButton = styled.button`\n display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: transparent;\n  border: none;\n  color: ${props => props.theme.colors.redColor};\n  font-size: 24px;\n  cursor: pointer;\n  padding: 0;\n  margin: 0 8px;\n  transition: opacity 200ms ease-in-out;\n\n  &:hover {\n    color: #ec0000;\n    transform: scale(1.2);\n    transition: transform 400ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nexport const ScrollLeftButton = styled(ScrollButton)`\n  visibility: ${({ show }) => (show ? \"visible\" : \"hidden\")};\n  font-size: 35px;\n`;\n\nexport const ScrollRightButton = styled(ScrollButton)`\n  visibility: ${({ show }) => (show ? \"visible\" : \"hidden\")};\n  font-size: 35px;\n`;\n\nexport const MovieCardBox = styled.li`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 250px;\n  min-height: 350px;\n  border-radius: 6px;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n  transition: transform 400ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 600ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  }\n`;\n\nexport const MovieCard = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`; \n\n\nexport const Poster = styled.img`\n  flex: 1;\n  object-fit: cover;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n`;\n\n\nexport const Rating = styled.span`\n  margin-left: 10px;\n  background-color: orange;\n  padding: 3px 8px;\n  color: ${props => props.theme.colors.primaryDarkText};\n  border-radius: 5px;\n     position: absolute;\n    top: 12px;\n    right: 12px;\n    z-index: 1;\n`;"," import { useState, useEffect, useRef, Suspense } from \"react\";\nimport { useLocation, Outlet } from \"react-router-dom\";\nimport { BsArrowLeftCircle, BsArrowRightCircle } from \"react-icons/bs\";\nimport { getTrendingMoviesByGenre, getTrendingAll } from \"services/api\";\nimport { Loader } from \"components/Loader/Loader\";\nimport noPoster from '../../images/no-poster.jpeg';\nimport {\n    Title,\n    TrendingBox,\n    TrendingList,\n    Container,\n    ListBox,\n    MovieList,\n    MovieCardBox,\n    Link,\n    MovieCard,\n    Rating,\n    Poster,\n    ScrollLeftButton,\n    ScrollRightButton,\n} from \"./Home.styled\"; \n\nconst genres = [\n  { id: 28, name: \"Action\" },\n  { id: 10751, name: \"Family\" },\n  { id: 10749, name: \"Romance\" },\n  { id: 18, name: \"Drama\" },\n  { id: 35, name: \"Comedy\" },\n];\n\nconst Home = () => {\n  const [genreMovies, setGenreMovies] = useState({});\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const genreListsRefs = useRef([]);\n  const location = useLocation();\n  const prevUrl = location.pathname === '/' ? '/movies/' : '';\n\n  useEffect(() => {\n    setLoading(true);\n\n    Promise.all(genres.map(({ id }) => getTrendingMoviesByGenre(id)))\n      .then(results => {\n        const updatedGenreMovies = genres.reduce((acc, { id }, index) => {\n          acc[id] = results[index];\n          return acc;\n        }, {});\n\n        setGenreMovies(updatedGenreMovies);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setLoading(false);\n      });\n\n    getTrendingAll()\n      .then(results => {\n        setTrendingMovies(results);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, []);\n\n  const scrollLeft = genreIndex => {\n    const list = genreListsRefs.current[genreIndex];\n    list.scrollBy({ left: -300, behavior: \"smooth\" });\n  };\n\n  const scrollRight = genreIndex => {\n    const list = genreListsRefs.current[genreIndex];\n    list.scrollBy({ left: 300, behavior: \"smooth\" });\n  };\n\n    return (\n        <>\n            {!loading ? (\n                <Container>\n                    <TrendingBox>\n                        <Title style={{ textAlign: \"center\", margin: '0'}}>Trending Today</Title>\n                        <TrendingList>\n                            <ScrollLeftButton show={true} onClick={() => scrollLeft(-1)}>\n                                <BsArrowLeftCircle />\n                            </ScrollLeftButton>\n                            <MovieList ref={ref => (genreListsRefs.current[-1] = ref)}>\n                                {trendingMovies.map(({ id, title, poster_path, vote_average }) => (\n                                    <MovieCardBox key={id}>\n                                        <Link to={`${prevUrl}${id}`} state={{ from: location }}>\n                                            <MovieCard id={id}>\n                                                <Poster\n                                                    src={poster_path ? `https://image.tmdb.org/t/p/w300/${poster_path}` : noPoster}\n                                                    alt={title}\n                                                    loading=\"lazy\"\n                                                />\n                                                <Rating>{vote_average.toFixed(1)}</Rating>\n                                            </MovieCard>\n                                        </Link>\n                                    </MovieCardBox>\n                                ))}\n                            </MovieList>\n                            <ScrollRightButton show={true} onClick={() => scrollRight(-1)}>\n                                <BsArrowRightCircle />\n                            </ScrollRightButton>\n                        </TrendingList>\n                    </TrendingBox>\n                    <ListBox>\n                        {genres.map(({ id, name }, index) => (\n                            <div key={id}>\n                                <Title>{name}</Title>\n                                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                    <ScrollLeftButton show={true} onClick={() => scrollLeft(index)}>\n                                        <BsArrowLeftCircle />\n                                    </ScrollLeftButton>\n                                    <MovieList ref={ref => (genreListsRefs.current[index] = ref)}>\n                                        {genreMovies[id]?.map(({ id, title, poster_path, vote_average }) => (\n                                            <MovieCardBox key={id}>\n                                                <Link to={`${prevUrl}${id}`} state={{ from: location }}>\n                                                    <MovieCard id={id}>\n                                                        <Poster\n                                                            src={poster_path ? `https://image.tmdb.org/t/p/w300/${poster_path}` : noPoster}\n                                                            alt={title}\n                                                            loading=\"lazy\"\n                                                        />\n                                                        <Rating>{vote_average.toFixed(1)}</Rating>\n                                                    </MovieCard>\n                                                </Link>\n                                            </MovieCardBox>\n                                        ))}\n                                    </MovieList>\n                                    <ScrollRightButton show={true} onClick={() => scrollRight(index)}>\n                                        <BsArrowRightCircle />\n                                    </ScrollRightButton>\n                                </div>\n                            </div>\n                        ))}\n                    </ListBox>\n                    <Suspense fallback={<Loader />}>\n                        <Outlet />\n                    </Suspense>\n                </Container>\n            )\n                : (<Loader />)}\n        </>\n    ); \n};\n\nexport default Home; ","import axios from \"axios\";\n\nconst API_KEY = 'a672ae57e08bb16567badfa77d9e520f'; \n\nexport async function getMovieById(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getSeriesById(series_id) {\n    const url = `https://api.themoviedb.org/3/tv/${series_id}?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getTrendingAll() {\n  const url = `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`;\n  try {\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}\n\nexport async function getTrendingMovies() {\n    const url = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`;\n    try {\n        const resp = await axios.get(url);\n        return resp.data.results;\n    } catch (error) {\n        return; \n    }   \n};\n\n\nexport async function getTrendingSeries() {\n  const url = `https://api.themoviedb.org/3/trending/tv/week?api_key=${API_KEY}`;\n    try {\n        const resp = await axios.get(url);\n        return resp.data.results;\n    } catch (error) {\n        return; \n    }   \n};\n\n\nexport async function getMovieCast(movieId) {\n     const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data.cast;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getSeriesCast(series_id) {\n     const url = `https://api.themoviedb.org/3/tv/${series_id}/credits?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data.cast;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getMovieReviews(movieId) {\n  try {\n             const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getSeriesReviews(series_id) {\n  try {\n    const url = `https://api.themoviedb.org/3/tv/${series_id}/reviews?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}; \n\nexport async function getSearchedMovie(query) {\n  try {\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}\n\nexport async function getSearchedSeries(query) {\n  try {\n    const url = `https://api.themoviedb.org/3/search/tv?api_key=${API_KEY}&query=${query}&include_adult=false`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}; \n\nexport async function getSeriesVideo(series_id) {\n  try {\n    const url = `https://api.themoviedb.org/3/tv/${series_id}/videos?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}; \n\nexport async function getMoviesVideo(moviesId) {\n  try {\n    const url = `https://api.themoviedb.org/3/movie/${moviesId}/videos?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}; \n\nexport async function getTrendingMoviesByGenre(genre) {\n  try {\n    const url = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&sort_by=popularity.desc&with_genres=${genre}`;\n    const resp = await axios.get(url); \n    return resp.data.results; \n  } catch (error) {\n    return; \n  }\n}; \n\nexport async function addMovieToWatchList(movieId) {\n  try {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/account_states?api_key=${API_KEY}`;\n    const resp = await axios.post(url); \n    return resp.data.results; \n  } catch (error) {\n    return; \n  }\n}; \n\nexport async function deleteMovieFromWatchList(movieId) {\n  try {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/account_states?api_key=${API_KEY}`;\n    const resp = await axios.post(url); \n    return resp.data.results; \n  } catch (error) {\n    return; \n  }\n}; "],"names":["Link","styled","NavLink","props","theme","colors","primaryDarkText","primaryLightText","redColor","Title","Container","TrendingBox","TrendingList","ListBox","MovieList","ScrollButton","ScrollLeftButton","show","ScrollRightButton","MovieCardBox","MovieCard","Poster","Rating","genres","id","name","useState","genreMovies","setGenreMovies","trendingMovies","setTrendingMovies","loading","setLoading","genreListsRefs","useRef","location","useLocation","prevUrl","pathname","useEffect","Promise","all","map","getTrendingMoviesByGenre","then","results","updatedGenreMovies","reduce","acc","index","catch","error","console","getTrendingAll","scrollLeft","genreIndex","current","scrollBy","left","behavior","scrollRight","Loader","style","textAlign","margin","onClick","ref","title","poster_path","vote_average","to","state","from","src","noPoster","alt","toFixed","display","alignItems","Suspense","fallback","API_KEY","getMovieById","movieId","url","axios","resp","data","getSeriesById","series_id","getTrendingMovies","getTrendingSeries","getMovieCast","cast","getSeriesCast","getMovieReviews","getSeriesReviews","getSearchedMovie","query","getSearchedSeries","getSeriesVideo","getMoviesVideo","moviesId","genre"],"sourceRoot":""}