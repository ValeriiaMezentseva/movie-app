{"version":3,"file":"static/js/795.2bfd9d94.chunk.js","mappings":"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","sources":["pages/SeriesInfo/SeriesInfo.jsx"],"sourcesContent":["import { useState, useEffect, Suspense } from \"react\";\nimport { useLocation, useParams, Outlet } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { AiTwotoneStar, AiFillHeart} from 'react-icons/ai';\nimport { BiMoviePlay } from 'react-icons/bi';\n\nimport { getSeriesById } from \"services/api\";\nimport { BackLink } from \"components/BackLink/BackLink\";\nimport { Loader } from \"components/Loader/Loader\";\nimport Video from \"components/Videos/Video\";\n\nimport {\n  addMovieToWatchList,\n  addMovieToFavoriteList,\n  removeMovieFromFavoriteList,\n  removeMovieFromWatchList\n} from \"redux/movies/moviesSlice\";\n\nimport {\n    Container,\n    InfoWrapper,\n    MovieDetails,\n    StyledLink,\n    MoreInfoList,\n    MoreInfoItem,\n    ShortInfo,\n    Title,\n    InfoItem,\n    OverView,\n    BottomInfo,\n    BottomTitleInfo,\n    BottomInfoList,\n    ButtonsBox,\n    AddButton, \n    Image,\n} from \"../MovieInfo/MovieInfo.styled\"; \n\n\nconst SeriesInfo = () => {\n    const [series, setSeries] = useState({});\n    const [loading, setLoading] = useState(false);\n    const location = useLocation();\n    const { series_id } = useParams();\n    const backLinkHref = location.state?.from ?? '/series';\n\n    const dispatch = useDispatch();\n    const watchListMovies = useSelector((state) => state.movies.watchlistMovies);\n    const favoriteMovies = useSelector((state) => state.movies.favoriteMovies);\n\n    useEffect(() => {\n        if (series_id) {\n            setLoading(true);\n            getSeriesById(series_id).then(data => { setSeries(data) }).finally(() => setLoading(false));\n        }\n        \n    }, [series_id]);\n\n    const {\n        id,\n        name,\n        genres = [],\n        poster_path,\n        overview,\n        vote_average = 1,\n        vote_count,\n        number_of_seasons,\n        first_air_date = '',\n    } = series;\n    \n    const genresList = genres.map(genre => genre.name).join(', ');\n    const releaseDate = first_air_date.split('-').reverse().join('.');\n    const voteAverage = vote_average.toFixed(1);\n\n    const handleAddToWatchList = () => {\n        dispatch(addMovieToWatchList(series));\n    };\n\n    const handleAddToFavorites = () => {\n        dispatch(addMovieToFavoriteList(series));\n    };\n\n    const handleRemoveFromWatchList = () => {\n        dispatch(removeMovieFromWatchList({ id }));\n    };\n\n    const handleRemoveFromFavorites = () => {\n        dispatch(removeMovieFromFavoriteList({ id }));\n    };\n    \n    const isSeriesInWatchlist = watchListMovies.some(movie => movie.id === id);\n    const isSeriesInFavorites = favoriteMovies.some(movie => movie.id === id);\n\n    return (\n        <>\n            {loading && <Loader />}\n            <Container backdrop={series.backdrop_path}>\n                <BackLink to={backLinkHref}>Back to series</BackLink>\n                <InfoWrapper>\n                    <div>\n                        <Image\n                            src={poster_path && `https://image.tmdb.org/t/p/w300${poster_path}`}\n                            alt={name}\n                            loading=\"lazy\"\n                        />\n                    </div>\n            \n                    <MovieDetails>\n                        <Title> {name}</Title>\n                        <ShortInfo>\n                            <AiTwotoneStar fill='orange' />\n                            <InfoItem> {voteAverage}</InfoItem>\n                            <AiFillHeart fill=\"red\" />\n                            <InfoItem> {vote_count}</InfoItem>\n                            <BiMoviePlay fill='green' />\n                            <InfoItem> seasons: {number_of_seasons}</InfoItem>\n                        </ShortInfo>\n                        <ButtonsBox>\n                            {isSeriesInWatchlist ? (\n                                <AddButton\n                                    type=\"button\"\n                                    onClick={handleRemoveFromWatchList}\n                                >\n                                    Remove from WatchList\n                                </AddButton>\n                            ) : (\n                                <AddButton type=\"button\" onClick={handleAddToWatchList}>\n                                    Add to WatchList\n                                </AddButton>\n                            )}\n                            {isSeriesInFavorites ? (\n                                <AddButton\n                                    type=\"button\"\n                                    onClick={handleRemoveFromFavorites}\n                                >\n                                    Remove from Favorites\n                                </AddButton>\n                            ) : (\n                                <AddButton type=\"button\" onClick={handleAddToFavorites}>\n                                    Add to Favorites\n                                </AddButton>\n                            )}\n                        </ButtonsBox>\n                        <OverView>{overview}</OverView>\n                        <BottomInfoList>\n                            <BottomInfo>\n                                <BottomTitleInfo> Release date: </BottomTitleInfo>\n                                <span>  {releaseDate}</span>\n                            </BottomInfo>\n                            <BottomInfo>\n                                <BottomTitleInfo> Genres: </BottomTitleInfo>\n                                <span> {genresList}</span>\n                            </BottomInfo>\n                        </BottomInfoList>\n                \n                        <MoreInfoList>\n                            <MoreInfoItem>\n                                <StyledLink to=\"cast\" state={{ from: location.state?.from ?? '/' }}>\n                                    Cast\n                                </StyledLink>\n                            </MoreInfoItem>\n                            <MoreInfoItem>\n                                <StyledLink to=\"reviews\" state={{ from: location.state?.from ?? '/' }}>\n                                    Reviews\n                                </StyledLink>\n                            </MoreInfoItem>\n                            <MoreInfoItem>\n                                <Video />\n                            </MoreInfoItem>\n                        </MoreInfoList>\n                    </MovieDetails>\n                </InfoWrapper>\n                <Suspense fallback={<Loader />}>\n                    <Outlet />\n                </Suspense>\n            </Container>\n        </>\n    );\n}; \n\n\nexport default SeriesInfo; "],"names":["useState","series","setSeries","loading","setLoading","location","useLocation","series_id","useParams","backLinkHref","state","from","dispatch","useDispatch","watchListMovies","useSelector","movies","watchlistMovies","favoriteMovies","useEffect","getSeriesById","then","data","finally","id","name","genres","poster_path","overview","vote_average","vote_count","number_of_seasons","first_air_date","genresList","map","genre","join","releaseDate","split","reverse","voteAverage","toFixed","isSeriesInWatchlist","some","movie","isSeriesInFavorites","backdrop","backdrop_path","to","src","alt","fill","type","onClick","removeMovieFromWatchList","addMovieToWatchList","removeMovieFromFavoriteList","addMovieToFavoriteList","Suspense","fallback"],"sourceRoot":""}