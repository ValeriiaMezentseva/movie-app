{"version":3,"file":"static/js/715.1043ea69.chunk.js","mappings":"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","sources":["components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/MovieInfoModal/MovieInfoModal.jsx","components/MovieInfoModal/MovieInfoModal.styled.jsx","components/MovieList/MovieList.styled.jsx","components/SeriesInfoModal/SeriesInfoModal.jsx","services/api.js"],"sourcesContent":["import styled, { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n  z-index: 4;\n\n  background-color: rgba(0, 0, 0, 0.1);\n\n  animation: ${fadeIn} 0.3s ease-in; \n`;\n\nexport const CloseButton = styled.button`\n  position: absolute;\n  top: 25px;\n  right: 30px; \n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  padding: 0;\n\n  background-color: transparent;\n\n  border: none;\n  outline: none;\n\n  cursor: pointer;\n\n  svg {\n    fill: red;\n  }\n\n  transition: transform 0.3s ease-in-out;\n\n  &:hover {\n    transform: scale(1.2);\n  }\n`;\n\nexport const ModalWindow = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 320px;\n  max-width: 80%;\n  max-height: 80%; \n  overflow-y: auto;\n  z-index: 5;\n\n        @media screen and (min-width: 480px) {\n   width: 450px;\n  }\n\n     @media screen and (min-width: 678px) {\n   width: 650px;\n  }\n\n  @media screen and (min-width: 940px) {\n    width: 800px;\n  }\n`;","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { IoClose } from 'react-icons/io5';\n\nimport { Overlay, ModalWindow, CloseButton } from './Modal.styled';\n\nfunction Modal({ children, state, stateFn }) {\n  useEffect(() => {\n    const handleKeydown = e => {\n      if (e.code === 'Escape') {\n        stateFn(false);\n      }\n    };\n    window.addEventListener('keydown', handleKeydown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  }, [state, stateFn]);\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      stateFn(false);\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalWindow>\n        <CloseButton type=\"button\" onClick={() => stateFn('closed')}>\n          <IoClose size={25} />\n        </CloseButton>\n        {children}\n      </ModalWindow>\n      </Overlay>,\n    document.querySelector('#modal')\n  );\n}; \n\nexport default Modal; ","import styled from \"@emotion/styled\";\n\nexport const MovieCardContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Poster = styled.img`\n  flex: 1;\n  object-fit: cover;\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n`;\n\n\n\nexport const Info = styled.div`\n  padding-top: 12px;\n  padding-left: 12px;\n  color: ${props => props.theme.colors.primaryDarkText};\n`;\n\nexport const Title = styled.h2`\n  text-decoration: none;\n  margin: 0;\n  font-size: 16px;\n  letter-spacing: 0.04em;\n  color: ${props => props.theme.colors.primaryDarkText};\n`;\n\nexport const MovieInfo = styled.p`\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 14px;\n  letter-spacing: 0.04em;\n  color: ${props => props.theme.colors.primaryDarkText};\n`;\n\nexport const Rating = styled.span`\n  margin-left: 10px;\n  background-color: orange;\n  padding: 3px 8px;\n  color: ${props => props.theme.colors.primaryDarkText};\n  border-radius: 5px;\n`;","import PropTypes from 'prop-types';\n\nimport { Poster, Info, Title, MovieInfo, Rating, } from './MovieCard.styled';\nimport noPoster from '../../images/no-poster.jpeg';\n\n\n\nexport const MovieCard = ({ id, title, poster, releaseDate, voteAverage = 1, onClick, }) => {\n    \n    return (\n        <div onClick={onClick} >\n           \n                <Poster\n                    src={poster ? `https://image.tmdb.org/t/p/w300/${poster}` : noPoster}\n                    alt={title}\n                loading=\"lazy\" />\n            <Info>\n                <Title>{title}</Title>\n                <MovieInfo>\n                    { releaseDate ? new Date(releaseDate).getFullYear() : 'No information'}\n                    <Rating>{voteAverage.toFixed(1)}</Rating>\n                </MovieInfo>\n            </Info>\n        </div>\n    )\n\n};\n\nMovieCard.propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    poster: PropTypes.string, \n    releaseDate: PropTypes.string, \n    voteAverage: PropTypes.number,\n}\n\n\n\n","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector  } from \"react-redux\";\n\nimport { AiTwotoneStar, AiFillHeart } from \"react-icons/ai\";\nimport { BiTime } from \"react-icons/bi\";\n\nimport { getMovieById } from \"services/api\";\nimport { Loader } from \"components/Loader/Loader\";\n\nimport {\n  removeMovieFromFavoriteList,\n  removeMovieFromWatchList\n} from \"redux/movies/moviesSlice\";\n\n\nimport {\n    Container,\n    InfoWrapper,\n    MovieDetails,\n    ShortInfo,\n    InfoItem,\n    OverView,\n    BottomInfo,\n    BottomTitleInfo,\n    BottomInfoList,\n    Title,\n    AddButton,\n    ButtonsBox,\n    Image\n} from \"./MovieInfoModal.styled\"; \n\nconst MovieInfoModal = ({ movieId, closeModal }) => {\n    const [movie, setMovie] = useState(null);\n    const dispatch = useDispatch();\n    const watchListMovies = useSelector((state) => state.movies.watchlistMovies);\n    const favoriteMovies = useSelector((state) => state.movies.favoriteMovies);\n\n    useEffect(() => {\n        if (movieId) {\n            getMovieById(movieId)\n                .then((data) => {\n                    setMovie(data);\n                })\n                .catch((error) => {\n                    throw error;\n                });\n        }\n    }, [movieId]);\n\n    if (!movie) {\n        return <Loader />;\n    }\n\n    const {\n        id,\n        title,\n        genres = [],\n        poster_path,\n        overview,\n        vote_average = 1,\n        vote_count,\n        runtime,\n        release_date = \"\"\n    } = movie;\n\n    const genresList = genres.map((genre) => genre.name).join(\", \");\n    const releaseDate = release_date.split(\"-\").reverse().join(\".\");\n    const voteAverage = vote_average.toFixed(1);\n\n    const handleRemoveFromWatchList = () => {\n        dispatch(removeMovieFromWatchList({ id }));\n        closeModal();\n    };\n\n    const handleRemoveFromFavorites = () => {\n        dispatch(removeMovieFromFavoriteList({ id }));\n        closeModal();\n    };\n    \n    const isMovieInWatchlist = watchListMovies.some(movie => movie.id === id);\n    const isMovieInFavorites = favoriteMovies.some(movie => movie.id === id);\n\n    return (\n        <Container>\n            <InfoWrapper>\n                <div>\n                    <Image\n                        src={poster_path && `https://image.tmdb.org/t/p/w300${poster_path}`}\n                        alt={title}\n                        loading=\"lazy\"\n                    />\n                </div>\n\n                <MovieDetails>\n                    <Title>{title}</Title>\n                    <ShortInfo>\n                        <AiTwotoneStar fill=\"orange\" />\n                        <InfoItem>{voteAverage}</InfoItem>\n                        <AiFillHeart fill=\"red\" />\n                        <InfoItem>{vote_count}</InfoItem>\n                        <BiTime fill=\"green\" />\n                        <InfoItem>{runtime} min</InfoItem>\n                    </ShortInfo>\n                    <ButtonsBox>\n                        {isMovieInWatchlist && (\n              <AddButton\n                type=\"button\"\n                onClick={handleRemoveFromWatchList}\n              >\n                Remove from WatchList\n              </AddButton>\n            )}\n            {isMovieInFavorites && (\n              <AddButton\n                type=\"button\"\n                onClick={handleRemoveFromFavorites}\n              >\n                Remove from Favorites\n              </AddButton>\n            )}\n                    </ButtonsBox>\n                    <OverView>{overview}</OverView>\n                    <BottomInfoList>\n                        <BottomInfo>\n                            <BottomTitleInfo>Release date:</BottomTitleInfo>\n                            <span>{releaseDate}</span>\n                        </BottomInfo>\n                        <BottomInfo>\n                            <BottomTitleInfo>Genres:</BottomTitleInfo>\n                            <span>{genresList}</span>\n                        </BottomInfo>\n                    </BottomInfoList>\n                </MovieDetails>\n            </InfoWrapper>\n        </Container>\n    );\n}; \n\nexport default MovieInfoModal;","import styled from \"@emotion/styled\";\n\nexport const Container = styled.main`\n  width: 100%;\n`;\n\nexport const InfoWrapper = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-direction: column; \n  justify-content: center; \n  align-items: center;\n  gap: 20px;\n  padding: 25px;\n  max-width: 100%;\n  border: 3px solid black;\n  background-color: ${props => props.theme.colors.backgroundColor};\n  border-radius: 24px;\n  box-shadow: 0px 4px 48px rgba(0, 0, 0, 0.1);\n   @media screen and (min-width: 770px) {\n  flex-direction: row;\n  }\n`;\n\nexport const Image = styled.img`\n width: 280px;\n margin-top: 18px; \n  \n  @media screen and (min-width: 480px) {\n    padding-left: 10px;\n    margin-top: 0; \n    width: 300px; \n  }\n  \n  @media screen and (min-width: 940px) {\n     padding-left: 0; \n  }\n\n`\n\nexport const MovieDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 280px;\n align-items: flex-start;\n\n        @media screen and (min-width: 480px) {\n   width: 410px;\n    align-items: center;\n  }\n  \n    @media screen and (min-width: 678px) {\n    width: 480px;\n\n  }\n\n    @media screen and (min-width: 770px) {\n    width: 300px;\n    align-items: flex-start; \n  }\n  @media screen and (min-width: 940px) {\n    width: 470px;\n  }\n`;\n\nexport const ShortInfo = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px; \n\n`;\n\nexport const Title = styled.h2`\n  color: ${props => props.theme.colors.primaryDarkText};\n  margin: 0; \n`;\n\nexport const InfoItem = styled.span`\n  padding: 5px;\n  margin-right: 10px;\n  color: ${props => props.theme.colors.primaryDarkText};\n`;\n\nexport const OverView = styled.p`\n  text-align: justify;\n  margin-right: 20px;\n  margin-bottom: 10px;\n  color: ${props => props.theme.colors.primaryDarkText};\n\n     @media screen and (min-width: 678px) {\n     margin-bottom: 30px;\n  }\n`;\n\nexport const BottomInfo = styled.div`\n  margin-bottom: 10px;\n  margin-top: 10px;\n  margin-right: 50px;\n  display: flex;\n  flex-direction: column;\n  color: ${props => props.theme.colors.primaryDarkText};\n\n         @media screen and (min-width: 480px) {\n   margin-right: 130px;\n  }\n           @media screen and (min-width: 678px) {\n  margin-right: 100px;\n  }\n`;\n\nexport const BottomTitleInfo = styled.span`\n  font-weight: 600;\n  margin-bottom: 6px;\n  color: ${props => props.theme.colors.primaryDarkText};\n`;\n\nexport const BottomInfoList = styled.div`\n  display: flex;\n  margin-left: 16px;\n  margin-right: 16px; \n`;\n\nexport const AddButton = styled.button`\n  display: flex;\n \n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  padding: 10px 16px;\n  margin-right: 10px;\n  margin-top: 10px;\n  border-radius: 8px;\n  background-color: ${props =>\n    props.disabled ? \"gray\" : \"black\"};\n  color: white;\n  font-size: 15px;\n  font-weight: bold;\n  border: none;\n  outline: none;\n  transition: transform 0.2s ease;\n\n  &:hover {\n    transform: scale(1.05);\n    background-color: ${props =>\n      props.disabled ? \"gray\" : \"black\"}; // Use gray color for disabled button\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n`;\n\nexport const ButtonsBox = styled.div`\n  display: flex;\n\n`;","import styled from \"@emotion/styled\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Link = styled(NavLink)` \nalign-items: center;\ntext-decoration: none;\ncolor: ${props => props.theme.colors.primaryDarkText};\nfont-weight: 500;\n\n&.active {\n    color: ${props => props.theme.colors.primaryLightText};\n    background-color: ${props => props.theme.colors.redColor};\n  }\n`;\n\n\nexport const List = styled.ul`\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 40px;\n  display: grid;\n  max-width: 280px;\n  justify-content: center;\n  grid-gap: 20px;\n  grid-auto-rows: auto; \n  padding-left: 0; \n\n    @media screen and (min-width: 640px) {\n       margin-bottom: 60px;\n    max-width: 700px;\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 32px;\n  }\n\n        @media screen and (min-width: 940px) {\n       grid-template-columns: repeat(3, 1fr);\n    grid-gap: 32px 16px;\n    max-width: 1200px;\n  }\n\n    @media screen and (min-width: 1280px) {\n    grid-template-columns: repeat(4, 2fr);\n  }\n\n`;\n\nexport const MovieCardBox = styled.li`\n  display: flex;\n  flex-direction: column;\n  width: 300px; \n  border-radius: 6px;\n  cursor: pointer; \n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n  transition: transform 400ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 600ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  }\n  \n`;","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { AiTwotoneStar, AiFillHeart } from 'react-icons/ai';\nimport { BiTime } from 'react-icons/bi';\n\nimport { getSeriesById } from \"services/api\";\n\nimport { Loader } from \"components/Loader/Loader\";\n\nimport {\n  removeMovieFromFavoriteList,\n  removeMovieFromWatchList\n} from \"redux/movies/moviesSlice\";\n\nimport {\n    Container,\n    InfoWrapper,\n    MovieDetails,\n    ShortInfo,\n    InfoItem,\n    OverView,\n    BottomInfo,\n    BottomTitleInfo,\n    BottomInfoList,\n    Title,\n    AddButton,\n    ButtonsBox,\n    Image\n} from \"../MovieInfoModal/MovieInfoModal.styled\"; \n\nconst SeriesInfoModal = ({ seriesId, closeModal }) => {\n  const [series, setSeries] = useState(null);\n  const dispatch = useDispatch();\n  const watchListMovies = useSelector((state) => state.movies.watchlistMovies);\n  const favoriteMovies = useSelector((state) => state.movies.favoriteMovies);\n\n  useEffect(() => {\n    if (seriesId) {\n      getSeriesById(seriesId)\n        .then(data => {\n          setSeries(data);\n        })\n        .catch(error => {\n          throw error;\n        });\n    }\n  }, [seriesId]);\n\n  if (!series) {\n    return <Loader />;\n  }\n\n  const {\n    id,\n    name,\n    genres = [],\n    poster_path,\n    overview,\n    vote_average = 1,\n    vote_count,\n    number_of_seasons,\n    first_air_date = '',\n  } = series;\n\n  const genresList = genres.map(genre => genre.name).join(', ');\n  const releaseDate = first_air_date.split('-').reverse().join('.');\n  const voteAverage = vote_average.toFixed(1);\n\n  const handleRemoveFromWatchList = () => {\n    dispatch(removeMovieFromWatchList({ id }));\n    closeModal();\n  };\n\n  const handleRemoveFromFavorites = () => {\n    dispatch(removeMovieFromFavoriteList({ id }));\n    closeModal();\n  };\n\n  const isMovieInWatchlist = watchListMovies.some(movie => movie.id === id);\n  const isMovieInFavorites = favoriteMovies.some(movie => movie.id === id);\n\n  return (\n    <Container>\n      <InfoWrapper>\n        <div>\n          <Image\n            src={poster_path && `https://image.tmdb.org/t/p/w300${poster_path}`}\n            alt={name}\n            loading=\"lazy\"\n          />\n        </div>\n\n        <MovieDetails>\n          <Title>{name}</Title>\n          <ShortInfo>\n            <AiTwotoneStar fill=\"orange\" />\n            <InfoItem>{voteAverage}</InfoItem>\n            <AiFillHeart fill=\"red\" />\n            <InfoItem>{vote_count}</InfoItem>\n            <BiTime fill=\"green\" />\n            <InfoItem> seasons: {number_of_seasons}</InfoItem>\n          </ShortInfo>\n          <ButtonsBox>\n            {isMovieInWatchlist && (\n              <AddButton\n                type=\"button\"\n                onClick={handleRemoveFromWatchList}\n              >\n                Remove from WatchList\n              </AddButton>\n            )}\n            {isMovieInFavorites && (\n              <AddButton\n                type=\"button\"\n                onClick={handleRemoveFromFavorites}\n              >\n                Remove from Favorites\n              </AddButton>\n            )}\n          </ButtonsBox>\n          <OverView>{overview}</OverView>\n          <BottomInfoList>\n            <BottomInfo>\n              <BottomTitleInfo>Release date:</BottomTitleInfo>\n              <span>{releaseDate}</span>\n            </BottomInfo>\n            <BottomInfo>\n              <BottomTitleInfo>Genres:</BottomTitleInfo>\n              <span>{genresList}</span>\n            </BottomInfo>\n          </BottomInfoList>\n        </MovieDetails>\n      </InfoWrapper>\n    </Container>\n  );\n};\n\nexport default SeriesInfoModal;","import axios from \"axios\";\n\nconst API_KEY = 'a672ae57e08bb16567badfa77d9e520f'; \n\nexport async function getMovieById(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getSeriesById(series_id) {\n    const url = `https://api.themoviedb.org/3/tv/${series_id}?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getTrendingAll() {\n  const url = `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`;\n  try {\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}\n\nexport async function getTrendingMovies() {\n    const url = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`;\n    try {\n        const resp = await axios.get(url);\n        return resp.data.results;\n    } catch (error) {\n        return; \n    }   \n};\n\n\nexport async function getTrendingSeries() {\n  const url = `https://api.themoviedb.org/3/trending/tv/week?api_key=${API_KEY}`;\n    try {\n        const resp = await axios.get(url);\n        return resp.data.results;\n    } catch (error) {\n        return; \n    }   \n};\n\n\nexport async function getMovieCast(movieId) {\n     const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data.cast;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getSeriesCast(series_id) {\n     const url = `https://api.themoviedb.org/3/tv/${series_id}/credits?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data.cast;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getMovieReviews(movieId) {\n  try {\n             const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getSeriesReviews(series_id) {\n  try {\n    const url = `https://api.themoviedb.org/3/tv/${series_id}/reviews?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}; \n\nexport async function getSearchedMovie(query) {\n  try {\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}\n\nexport async function getSearchedSeries(query) {\n  try {\n    const url = `https://api.themoviedb.org/3/search/tv?api_key=${API_KEY}&query=${query}&include_adult=false`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}; \n\nexport async function getSeriesVideo(series_id) {\n  try {\n    const url = `https://api.themoviedb.org/3/tv/${series_id}/videos?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}; \n\nexport async function getMoviesVideo(moviesId) {\n  try {\n    const url = `https://api.themoviedb.org/3/movie/${moviesId}/videos?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}; \n\nexport async function getTrendingMoviesByGenre(genre) {\n  try {\n    const url = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&sort_by=popularity.desc&with_genres=${genre}`;\n    const resp = await axios.get(url); \n    return resp.data.results; \n  } catch (error) {\n    return; \n  }\n}; \n\nexport async function addMovieToWatchList(movieId) {\n  try {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/account_states?api_key=${API_KEY}`;\n    const resp = await axios.post(url); \n    return resp.data.results; \n  } catch (error) {\n    return; \n  }\n}; \n\nexport async function deleteMovieFromWatchList(movieId) {\n  try {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/account_states?api_key=${API_KEY}`;\n    const resp = await axios.post(url); \n    return resp.data.results; \n  } catch (error) {\n    return; \n  }\n}; "],"names":["fadeIn","keyframes","Overlay","styled","CloseButton","ModalWindow","children","state","stateFn","useEffect","handleKeydown","e","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","type","size","document","querySelector","Poster","Info","props","theme","colors","primaryDarkText","Title","MovieInfo","Rating","MovieCard","id","title","poster","releaseDate","voteAverage","src","noPoster","alt","loading","Date","getFullYear","toFixed","movieId","closeModal","useState","movie","setMovie","dispatch","useDispatch","watchListMovies","useSelector","movies","watchlistMovies","favoriteMovies","getMovieById","then","data","catch","error","genres","poster_path","overview","vote_average","vote_count","runtime","release_date","genresList","map","genre","name","join","split","reverse","isMovieInWatchlist","some","isMovieInFavorites","fill","removeMovieFromWatchList","removeMovieFromFavoriteList","Container","InfoWrapper","backgroundColor","Image","MovieDetails","ShortInfo","InfoItem","OverView","BottomInfo","BottomTitleInfo","BottomInfoList","AddButton","disabled","ButtonsBox","Link","NavLink","primaryLightText","redColor","List","MovieCardBox","seriesId","series","setSeries","getSeriesById","number_of_seasons","first_air_date","API_KEY","url","axios","resp","series_id","getTrendingAll","results","getTrendingMovies","getTrendingSeries","getMovieCast","cast","getSeriesCast","getMovieReviews","getSeriesReviews","getSearchedMovie","query","getSearchedSeries","getSeriesVideo","getMoviesVideo","moviesId","getTrendingMoviesByGenre"],"sourceRoot":""}